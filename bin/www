#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('paddy:server');
var http = require('http');
var myaws = require("../awssns.js");
/**
 * Get port from environment and store in Express.
 */
require("date-utils");
console.log(new Date().toFormat("YYYY/MM/DD HH24:MI.SS"));
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var socketIO = require("socket.io"); 
var io = socketIO.listen(server);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var objList =[{"a":"TEST"},{"b":"TEST2"}];


//クライアント接続があると、以下の処理をさせる。
io.on('connection', function (socket) {
  socket.on("requireObjListOfServer", function (data) {
    // objListの要求
    io.emit("sendObjListToClient", objList);
  });

  socket.on("newSigfoxObj", function (data) {
    // Sigfoxからのメッセージが届く
    objList.push(data);
    const amount = 50;
    if(objList.length > amount){
      array.splice(0, objList.length-amount);
    }
  });

  //接続通知をクライアントに送信
  //io.emit("sendMessageToClient", {value:"1人入室しました。"});

  //クライアントからの受信イベントを設定
  socket.on("sendMessageToServer", function (data) {
      io.emit("sendMessageToClient", {value:data.value});
      console.log(data.value);
      if(data.value == "NN"){
        
      }
  });     

  //接続切れイベントを設定
  socket.on("disconnect", function () {
      //io.emit("sendMessageToClient", {value:"1人退室しました。"});
  });

  socket.on("sendToServer",function (obj){
    if(obj == null){
      return;
    }
    if(obj.type == "manual-notice"){
      myaws.sendMessage();
    }
  });
});