#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('paddy:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
require("date-utils");
console.log(new Date().toFormat("YYYY/MM/DD HH24:MI.SS"));
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var socketIO = require("socket.io"); 
var io = socketIO.listen(server);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



//クライアント接続があると、以下の処理をさせる。
io.on('connection', function (socket) {

  //接続通知をクライアントに送信
  io.emit("sendMessageToClient", {value:"1人入室しました。"});

  //クライアントからの受信イベントを設定
  socket.on("sendMessageToServer", function (data) {
      io.emit("sendMessageToClient", {value:data.value});
      if(data.value == "l"){
        var AWS = require('aws-sdk')
        //AWS.config.loadFromPath('./aws.json');

        var configs;
        var fs = require('fs');
        fs.access('../aws.json', function (err) {
          if(err == null){
            configs = require("../aws.json");
          }else{
            configs = {
              "accessKeyId":process.env.accessKeyId,
              "secretAccessKey":process.env.secretAccessKey
            }
          }
        });
        AWS.config.update({region: 'us-west-2',"accessKeyId":configs.accessKeyId,"secretAccessKey":configs.secretAccessKey});

        // Create publish parameters
        var params = {
          //TopicArn: 'arn:aws:sns:us-west-2:596041488651:sigfox-test',
          PhoneNumber: '+81-80-1981-9098',
          //"subject": "水田状況のお知らせ",
          Message: "田んぼの様子が変わりました．\n専用端末かWebから確認できます．\nhttp://iot-paddy.herokuapp.com"
        };

        // Create promise and SNS service object
        var publishTextPromise = new AWS.SNS({apiVersion: '2010-03-31'}).publish(params).promise();

        // Handle promise's fulfilled/rejected states
        publishTextPromise.then(
          function(data) {
            console.log(`Message ${params.Message} send sent to the topic ${params.TopicArn}`);
            console.log("MessageID is " + data.MessageId);
          }).catch(
            function(err) {
            console.error(err, err.stack);
          });

          


      }
  });     

  //接続切れイベントを設定
  socket.on("disconnect", function () {
      io.emit("sendMessageToClient", {value:"1人退室しました。"});
  });
});